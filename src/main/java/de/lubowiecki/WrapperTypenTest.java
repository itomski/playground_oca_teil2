package de.lubowiecki;

import java.util.ArrayList;
import java.util.List;

public class WrapperTypenTest {

    static int zahl1; // Klassenvariable. Standardwert 0, wenn die Klasse geladen wird
    int zahl2; // Instanzvariable. Standardwert 0, wenn das Objekt erzeugt wird
    static Integer zahl3; // Instanzvariable. Standardwert null, wenn das Objekt erzeugt wird
    Integer zahl4; // Instanzvariable. Standardwert null, wenn das Objekt erzeugt wird

    public static void main(String[] args) {

        // byte -> Byte
        // short -> Short
        // int -> Integer
        // long -> Long
        // float -> Float
        // double -> Double
        // char -> Character
        // boolean -> Boolean

        List<Integer> zahlen = new ArrayList<>();
        zahlen.add(10); // primitive 10 wird über Autoboxing zu komplex 10
        int i = zahlen.get(0); // komplex 10 wird über Auto-Unboxing zu primitiv 10
        Integer j = i; // Autoboxing
        byte b = j.byteValue(); // Wandelt den komplexen Integer in einen primitiven byte um

        Byte b2 = Byte.valueOf("10"); // valueOf produziert immer einen komplexen Datentyp

        // Alle statischen Methoden werden auf der Klasse ausgeführt
        // Sie ignorieren den Inhalt eines Objekts und verarbeiten lediglich die Parameter
        String str1 = j.toOctalString(15); // nicht ganz richtig...
        String str2 = Integer.toOctalString(15); // richtig

        System.out.println(Integer.BYTES);
        System.out.println(Double.BYTES);

        long l = 1_209_774_379_349_793_493l;
        int k = 1_209_774_379;
        k = 12_09_77_43_79;
        System.out.println(k); // enthält keine _

        System.out.println();

        j =  Integer.decode("0x100"); // Kann auch für Hex, Oct, Dez eingeben
        System.out.println(j);
        j = Integer.valueOf("0100"); // Verlangt Dezimalformat
        System.out.println(j);

        // Alle Zahlenwrapper werden zum Rechnen ausgepackt

        //Boolean b1 = new Boolean("TRuE");

        int i2 = 10;
        i2 = i2 + 10;
        // i2 = i2 + 10l; // erg ist ein long

        byte b3 = 127;
        short s3 = 32000;
        b3 = 100;

        int i4;
        final boolean b5 = true;

        if(b5) {
            i4 = 100;
        }
        //System.out.println(i4);

        float f1 = 1f;
        System.out.println(f1);
        double d1 = 1.05d; // 1.05
        System.out.println(d1);

        System.gc();

    }
}
