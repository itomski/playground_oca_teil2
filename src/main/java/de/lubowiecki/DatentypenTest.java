package de.lubowiecki;

import java.util.ArrayList;
import java.util.List;

public class DatentypenTest {

    static boolean c;

    public static void main(String[] args) {

        // primitiver Datentyp
        int i = 10;
        i = 100; // Ersetzt den alten Wert
        System.out.println(i);
        // primitive Datentypen haben keine Eigenschaften und keine Methoden

        // komplexer Datentyp: Basiert IMMER auf einer Klasse
        String str = new String("Hallo Welt");
        //String str = "Hallo Welt"; // Besonderheit von String
        // komplexe Datentypen haben Eigenschaften und Methode
        System.out.println(str.toUpperCase());
        System.out.println(str.charAt(0));

        // zahlen
        // byte < short < int < long < float < double
        // kleinere Datentypen können automatisch in größere Datentypen umgewandelt werden: primitive widening

        // zeichen
        // char

        // boolean

        // true = boolean Literal
        boolean aktiv = true;

        // 200 = int Literal
        int j = 200;

        // j ist kein Literal
        int k = j; // primitive Variablen werden als Kopie weitergegeben

        j++; // k wird durch die Änderung von j nicht mitverändert
        System.out.println(k);

        System.out.println();

        ArrayList<String> namen1 = new ArrayList<>();
        namen1.add("Peter");

        ArrayList<String> namen2 = namen1; // Komplexe Datentypen werden als Referenz weitergegeben
        // beide Variablen namen1 und namen2 zeigen auf das gleiche ArrayList-Objekt auf dem Heap
        namen1.add("Bruce");
        System.out.println(namen2);

        boolean b; // Deklaration (Lokale Variable)
        //System.out.println(b); // Error: b hat keinen Wert
        System.out.println(c); // c hat einen Standardwert da Klassenvariable

        // Standardwerte werden nur bei Klassenvariablen und Instanzvariablen vergeben
        // Lokale Variable bekommen keine Standardwerte!!!!!!

        System.out.println();

        int z = 200;
        changeValue(z);
        System.out.println(z);

        System.out.println();

        z = 200;
        z = changeValueBetter(z); // Rückgabewert der Methode wird der Variable zugewiesen
        System.out.println(z);

        System.out.println();

        ArrayList<Integer> zahlen = new ArrayList<>();
        changeList(zahlen);
        System.out.println(zahlen);

    }

    public static void changeValue(int zahl) {
        zahl++; // Die Kopie des Wertes wird geändert
    }

    public static int changeValueBetter(int zahl) {
        zahl++;
        return zahl;
    }

    public static void changeList(ArrayList<Integer> liste) {
        liste.add(123); // liste ist eine Referenz/Link auf die Original-Liste auf dem Heap
    }
}
